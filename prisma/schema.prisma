datasource db {
  provider = "postgresql"
  url      = env("WEB_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  userId                String
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken          String            @unique
  userId                String
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires               DateTime
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model VerificationToken {
  identifier            String
  token                 String
  expires               DateTime
 
  @@id([identifier, token])
}

model User {
  id                    String            @id @default(cuid())
  username              String            @unique
  password              String
  name                  String?
  image                 String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  accounts              Account[]
  sessions              Session[]
  reviews               Review[]
}

model Genre {
  id                    String            @id @default(cuid())
  name                  String

  metric                Metric[]
  movies                Movie[]
}

model Director {
  id                    String            @id @default(cuid())
  name                  String
  image                 String?

  movies                Movie[]
}

model Movie {
  id                    String            @id @default(cuid())
  title                 String            @unique
  directorId            String
  director              Director          @relation(fields: [directorId], references: [id], onDelete: Restrict)
  image                 String?
  rating                String?
  description           String?
  budget                Int?
  genreId               String
  genre                 Genre             @relation(fields: [genreId], references: [id], onDelete: Restrict)

  reviews               Review[]
}

model Metric {
  id                    String            @id @default(cuid())
  genreId               String
  genre                 Genre             @relation(fields: [genreId], references: [id], onDelete: Restrict)
  name                  String
  weight                Int

  reviews               MetricReview[]

  @@unique([genreId, name])
}

model Review {
  id                    String            @id @default(cuid())
  authorId              String
  author                User              @relation(fields: [authorId], references: [id], onDelete: Restrict)
  movieId               String
  movie                 Movie             @relation(fields: [movieId], references: [id], onDelete: Restrict)
  comment               String?
  metrics               MetricReview[]

  @@unique([authorId, movieId])
}

model MetricReview {
  id                    String            @id @default(cuid())
  reviewId              String
  review                Review            @relation(fields: [reviewId], references: [id], onDelete: Restrict)
  metricId              String
  metric                Metric            @relation(fields: [metricId], references: [id], onDelete: Restrict)
  score                 Int
  outof                 Int

  @@unique([reviewId, metricId])
}
